import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { PasswordCrudDto } from 'src/dto/password-crud.dto';
import { fromPassword, PasswordDto } from 'src/dto/password.dto';
import { Password, PasswordDocument } from 'src/schemas/password.schema';
import { createCipheriv, randomBytes, scrypt, createDecipheriv } from 'crypto';
import { promisify } from 'util';

@Injectable()
export class PasswordService {
  constructor(
    @InjectModel(Password.name) private passwordModel: Model<PasswordDocument>,
  ) {}

  /**
   * Get all password records in the databse, only executable by an admin
   */
  async getAllPasswords(): Promise<PasswordDto[]> {
    const result = await this.passwordModel.find().exec();
    return result.map((encryptedRecord) => {
      const { password, iv } = encryptedRecord;
      return fromPassword(encryptedRecord, await this.decrypt(password, iv));
    });
  }

  /**
   * Get all password records for a user, only executable by an admin
   * @param {string} userID The ID of the user to get passwords for
   */
  async getAllPasswordsForUser(userID: string): Promise<PasswordDto[]> {
    const result = await this.passwordModel.find({ userID }).exec();
    return result.map((encryptedRecord) => {
      const { password, iv } = encryptedRecord;
      return fromPassword(encryptedRecord, await this.decrypt(password, iv));
    });
  }

  /**
   * Get one password, only executable by an admin
   * @param {string} passwordID The ID of the password to get
   */
  async getOnePassword(passwordID: string): Promise<PasswordDto> {
    const result = await this.passwordModel.findById(passwordID).exec();
    return fromPassword(result);
  }

  /**
   * Create a password record and save it to the database
   * @param {PasswordCrudDto} createPasswordDto A DTO of the password to be saved
   */
  async createPassword(createPasswordDto: PasswordCrudDto): Promise<string> {
    const encryptedRecord = {
      ...createPasswordDto,
      password: await this.encrypt(createPasswordDto.password),
    };
    const createdPassword = new this.passwordModel(encryptedRecord);
    const result = await createdPassword.save();
    return result._id;
  }

  /**
   * Edit a password record, only excutable by an admin
   * @param {string} passwordID The ID of the password to edit
   * @param {PasswordCrudDto} editPasswordDto A DTO of the new updated password
   */
  async editPassword(
    passwordID: string,
    editPasswordDto: PasswordCrudDto,
  ): Promise<void> {
    const encryptedRecord: PasswordCrudDto = {
      ...editPasswordDto,
      ...(await this.encrypt(editPasswordDto.password)),
    };
    await this.passwordModel
      .findByIdAndUpdate(
        passwordID,
        { ...encryptedRecord },
        { useFindAndModify: true },
      )
      .exec();
  }

  /**
   * Delete a password record, only executable by an admin
   * @param {string} passwordID The ID of the password to be deleted
   */
  async deletePassword(passwordID: string): Promise<void> {
    const deletedPassword = this.passwordModel.findById(passwordID);
    await this.passwordModel.deleteOne(deletedPassword).exec();
  }

  private async encrypt(password: string) {
    const iv = randomBytes(16);

    // The key length is dependent on the algorithm.
    // In this case for aes256, it is 32 bytes.
    const key = (await promisify(scrypt)(
      process.env.ENCRYPT_PASSWORD,
      'salt',
      32,
    )) as Buffer;
    const cipher = createCipheriv('aes-256-ctr', key, iv);

    const encryptedText = Buffer.concat([
      cipher.update(password),
      cipher.final(),
    ]);
    return { password: encryptedText.toString(), iv: iv.toString() };
  }

  private async decrypt(encryptedPassword: string, ivString: string) {
    const iv = Buffer.from(ivString);

    const decipher = createDecipheriv(
      'aes-256-ctr',
      process.env.ENCRYPT_PASSWORD,
      iv,
    );
    var ep8array = new TextEncoder().encode(encryptedPassword);
    const decryptedText = Buffer.concat([
      decipher.update(ep8array),
      decipher.final(),
    ]);
    return decryptedText.toString();
  }
}
